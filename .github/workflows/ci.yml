name: CI Checks

# This workflow handles the complete CI pipeline for the Scry API including:
# - Linting (via golangci-lint)
# - Standard Testing (with test_without_external_deps tag to avoid external API calls)
# - Building
# - Optional Gemini API Integration Testing (without the test_without_external_deps tag)
#
# IMPORTANT NOTES ABOUT GEMINI API INTEGRATION TESTS:
# 1. These tests require a valid Gemini API key stored as a GitHub Secret named GEMINI_API_KEY
# 2. The tests connect to the real Gemini API and may incur costs
# 3. Tests can be affected by API rate limits, service outages, or API changes
# 4. They are configured to run:
#    - When manually triggered via the GitHub Actions UI (workflow_dispatch)
#    - On a weekly schedule (Monday at 2:00 AM UTC)
# 5. Consider reviewing test results after API version updates or when investigating potential
#    API integration issues
#
# For local testing with the real Gemini API, see instructions in:
# /internal/platform/gemini/TEST_README.md

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  # Manual trigger for the Gemini integration tests
  workflow_dispatch:
    inputs:
      run-gemini-tests:
        description: 'Run Gemini API integration tests'
        type: boolean
        default: true
        required: true
  # Weekly schedule for Gemini integration tests
  schedule:
    # Run at 2:00 AM UTC every Monday
    - cron: '0 2 * * 1'

# Centralized Go version - update this single value to change version across all jobs
env:
  GO_VERSION: '1.22'

permissions:
  contents: read # Default permission

jobs:
  pre-flight:
    name: Pre-flight Checks
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: scry_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
      - name: Install PostgreSQL client tools
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: Run CI pre-flight checks
        run: |
          chmod +x ./scripts/ci-pre-flight.sh
          ./scripts/ci-pre-flight.sh
        env:
          # Database connection variables
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/scry_test?sslmode=disable
          SCRY_TEST_DB_URL: postgres://postgres:postgres@localhost:5432/scry_test?sslmode=disable
          SCRY_DATABASE_URL: postgres://postgres:postgres@localhost:5432/scry_test?sslmode=disable
          # Project root variable
          SCRY_PROJECT_ROOT: ${{ github.workspace }}
          # Other required environment variables
          SCRY_AUTH_JWT_SECRET: ci-test-jwt-secret-32-characters-long
          SCRY_AUTH_BCRYPT_COST: "10"
          SCRY_AUTH_TOKEN_LIFETIME_MINUTES: "60"
          SCRY_AUTH_REFRESH_TOKEN_LIFETIME_MINUTES: "10080"
          SCRY_LLM_GEMINI_API_KEY: ci-test-gemini-key
          SCRY_LLM_MODEL_NAME: gemini-2.0-flash
          SCRY_LLM_PROMPT_TEMPLATE_PATH: prompts/flashcard_template.txt
          SCRY_LLM_MAX_RETRIES: "3"
          SCRY_LLM_RETRY_DELAY_SECONDS: "2"
          SCRY_SERVER_PORT: "8080"
          SCRY_SERVER_LOG_LEVEL: info
          SCRY_TASK_WORKER_COUNT: "2"
          SCRY_TASK_QUEUE_SIZE: "100"
          SCRY_TASK_STUCK_TASK_AGE_MINUTES: "30"

  lint:
    name: Lint
    runs-on: ubuntu-latest
    needs: pre-flight
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }} # Using centralized version
          cache: true
      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v7
        with:
          version: v2.1.1 # Match pre-commit hook version
          args: --verbose --build-tags=test_without_external_deps
        # Note: This includes gofmt and goimports checks, making a separate format job unnecessary

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: pre-flight
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: scry_test
        ports:
          - 5432:5432
        # Health check to ensure PostgreSQL is ready before running tests
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
      - name: Install PostgreSQL client tools
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: Verify database connectivity
        run: |
          echo "Verifying database connectivity with enhanced checks..."
          chmod +x ./scripts/wait-for-db.sh
          ./scripts/wait-for-db.sh --attempts 20 --sleep 3 --timeout 90
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/scry_test?sslmode=disable
          SCRY_TEST_DB_URL: postgres://postgres:postgres@localhost:5432/scry_test?sslmode=disable
          SCRY_DATABASE_URL: postgres://postgres:postgres@localhost:5432/scry_test?sslmode=disable

      - name: Reset and prepare database
        run: |
          # Make the reset script executable
          chmod +x ./scripts/reset-test-db.sh

          # Reset the database to ensure clean state
          echo "Resetting database to ensure clean state..."
          ./scripts/reset-test-db.sh

          # Apply migrations to the clean database
          echo "Applying database migrations..."
          go run cmd/server/main.go -migrate=up

          # Execute detailed migration validation
          echo "Validating migrations were applied correctly..."
          # This uses our enhanced validation logic that will fail CI if migrations aren't properly applied
          go run cmd/server/main.go -validate-migrations -verbose

          # Log migration table content for diagnostics
          echo "Migration table contents (diagnostic info):"
          PGPASSWORD=postgres psql -h localhost -p 5432 -U postgres -d scry_test -c "SELECT version_id, is_applied FROM schema_migrations ORDER BY version_id;"
        env:
          # Database connection variables
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/scry_test?sslmode=disable
          SCRY_TEST_DB_URL: postgres://postgres:postgres@localhost:5432/scry_test?sslmode=disable
          SCRY_DATABASE_URL: postgres://postgres:postgres@localhost:5432/scry_test?sslmode=disable
          # Project root variable (leveraging T036 fix)
          SCRY_PROJECT_ROOT: ${{ github.workspace }}

          # Required environment variables for configuration validation
          SCRY_AUTH_JWT_SECRET: ci-test-jwt-secret-32-characters-long
          SCRY_AUTH_BCRYPT_COST: "10"
          SCRY_AUTH_TOKEN_LIFETIME_MINUTES: "60"
          SCRY_AUTH_REFRESH_TOKEN_LIFETIME_MINUTES: "10080"
          SCRY_LLM_GEMINI_API_KEY: ci-test-gemini-key
          SCRY_LLM_MODEL_NAME: gemini-2.0-flash
          SCRY_LLM_PROMPT_TEMPLATE_PATH: prompts/flashcard_template.txt
          SCRY_LLM_MAX_RETRIES: "3"
          SCRY_LLM_RETRY_DELAY_SECONDS: "2"
          SCRY_SERVER_PORT: "8080"
          SCRY_SERVER_LOG_LEVEL: info
          SCRY_TASK_WORKER_COUNT: "2"
          SCRY_TASK_QUEUE_SIZE: "100"
          SCRY_TASK_STUCK_TASK_AGE_MINUTES: "30"
      - name: Run tests
        run: |
          # Reset database again right before tests to ensure clean state
          echo "Resetting database before tests..."
          ./scripts/reset-test-db.sh

          # Apply migrations again to ensure proper schema
          echo "Re-applying migrations for tests..."
          go run cmd/server/main.go -migrate=up

          # Validate migrations before running tests
          echo "Validating migrations before tests..."
          go run cmd/server/main.go -validate-migrations

          echo "Running tests with integration build tag..."
          go test -v -race -coverprofile=coverage.out -tags=integration ./...
        env:
          # Database connection variables
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/scry_test?sslmode=disable
          SCRY_TEST_DB_URL: postgres://postgres:postgres@localhost:5432/scry_test?sslmode=disable
          SCRY_DATABASE_URL: postgres://postgres:postgres@localhost:5432/scry_test?sslmode=disable
          # Project root variable (leveraging T036 fix)
          SCRY_PROJECT_ROOT: ${{ github.workspace }}

          # Required environment variables for configuration validation
          SCRY_AUTH_JWT_SECRET: ci-test-jwt-secret-32-characters-long
          SCRY_AUTH_BCRYPT_COST: "10"
          SCRY_AUTH_TOKEN_LIFETIME_MINUTES: "60"
          SCRY_AUTH_REFRESH_TOKEN_LIFETIME_MINUTES: "10080"
          SCRY_LLM_GEMINI_API_KEY: ci-test-gemini-key
          SCRY_LLM_MODEL_NAME: gemini-2.0-flash
          SCRY_LLM_PROMPT_TEMPLATE_PATH: prompts/flashcard_template.txt
          SCRY_LLM_MAX_RETRIES: "3"
          SCRY_LLM_RETRY_DELAY_SECONDS: "2"
          SCRY_SERVER_PORT: "8080"
          SCRY_SERVER_LOG_LEVEL: info
          SCRY_TASK_WORKER_COUNT: "2"
          SCRY_TASK_QUEUE_SIZE: "100"
          SCRY_TASK_STUCK_TASK_AGE_MINUTES: "30"
      - name: Check coverage
        run: |
          go tool cover -func=coverage.out

          # Extract coverage percentage and compare with minimum threshold
          total_coverage=$(go tool cover -func=coverage.out | grep total: | awk '{print $3}' | sed 's/%//')
          echo "Total coverage: $total_coverage"

          # Convert to integer (remove decimal part) for comparison
          coverage_int=$(echo $total_coverage | cut -d. -f1)
          if [ "$coverage_int" -lt "70" ]; then
            echo "Code coverage is below 70%"
            exit 1
          fi

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: pre-flight
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
      - name: Build application
        run: go build -v ./cmd/server/...

  # Optional job that runs tests with the real Gemini API (without the test_without_external_deps build tag)
  # This job is triggered manually via workflow_dispatch or on a weekly schedule
  #
  # PURPOSE:
  # - Verify real-world integration with the Gemini API
  # - Catch breaking changes in the API that mocks might miss
  # - Ensure prompt templates work as expected with the actual API
  #
  # COSTS & CONSIDERATIONS:
  # - Each test run will make multiple API calls that may incur costs
  # - API calls may be subject to rate limits (adjust test timeout if needed)
  # - Tests might become flaky due to API availability or changes
  # - Weekly scheduled runs help catch issues proactively
  #
  # SECURITY:
  # - API key is stored as a GitHub Secret (GEMINI_API_KEY)
  # - The job will fail if the secret is not available
  # - No API key information should appear in logs
  test-gemini-integration:
    name: Test Gemini Integration
    # Run only when explicitly requested via workflow_dispatch or weekly schedule
    if: |
      github.event_name == 'workflow_dispatch' && inputs.run-gemini-tests ||
      github.event_name == 'schedule'
    runs-on: ubuntu-latest
    # Set a timeout to prevent excessive usage in case of API issues
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      # Check for required secret before continuing
      - name: Verify Gemini API key is available
        run: |
          if [ -z "${{ secrets.GEMINI_API_KEY }}" ]; then
            echo "::error::GEMINI_API_KEY secret is not configured."
            echo "::error::Please add the GEMINI_API_KEY secret in your repository settings."
            echo "::error::This is required for running tests with the real Gemini API."
            exit 1
          else
            echo "::notice::GEMINI_API_KEY secret is available. Proceeding with tests."
          fi

      # Configure any specific test environment variables
      - name: Configure test environment
        run: |
          echo "::notice::Preparing to run Gemini integration tests with actual API"
          echo "::notice::Tests will be run without the test_without_external_deps build tag"
          echo "::notice::Timeout set to 5 minutes to account for API latency and potential retries"

      # Run tests specifically for the Gemini package without the test_without_external_deps tag
      - name: Run Gemini integration tests
        id: tests
        run: |
          echo "Running tests against real Gemini API at $(date)"
          go test -v -timeout 5m ./internal/platform/gemini/...
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          # Add any other environment variables needed for tests here
          GO_TEST_TIMEOUT: 5m

      # Add a summary of the test run
      - name: Gemini integration test summary
        if: always() # Run even if tests fail
        run: |
          if [ "${{ steps.tests.outcome }}" == "success" ]; then
            echo "::notice::✅ Gemini API integration tests completed successfully at $(date)"
          else
            echo "::warning::⚠️ Gemini API integration tests failed at $(date)"
            echo "::warning::This could be due to API changes, rate limits, or temporary service issues."
            echo "::warning::Review logs for detailed failure information."
          fi
          echo "::notice::These tests run with the actual Gemini API and may be affected by external factors."
          echo "::notice::Consider checking the Gemini API status if tests fail unexpectedly."
