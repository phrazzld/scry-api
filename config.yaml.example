# Scry API - Configuration Example
# ------------------------------
# This file contains example configuration for the Scry API.
# Copy this file to `config.yaml` and adjust values as needed.
#
# ENVIRONMENT VARIABLES:
# Any setting in this file can be overridden by a corresponding environment variable
# with the SCRY_ prefix and using underscores for nested paths.
#
# Examples:
# - server.port → SCRY_SERVER_PORT
# - auth.jwt_secret → SCRY_AUTH_JWT_SECRET
# - llm.gemini_api_key → SCRY_LLM_GEMINI_API_KEY
#
# See docs/ENVIRONMENT_VARIABLES.md for the complete reference.

# Server settings
server:
  # Port the HTTP server will listen on (default: 8080)
  port: 8080
  # Log level (options: debug, info, warn, error)
  # Default is "info" if not specified or if an invalid level is provided.
  log_level: info

# Database settings
database:
  # PostgreSQL connection URL
  # Format: postgres://username:password@host:port/database
  url: postgres://user:password@localhost:5432/scry

# Authentication settings
auth:
  # JWT secret for token signing/verification
  # IMPORTANT: In production, use a secure random string of at least 32 characters
  jwt_secret: replace-this-with-32-plus-random-chars!

  # BCrypt cost parameter for password hashing (4-31)
  # Higher values are more secure but slower
  # Default: 10 (bcrypt.DefaultCost if omitted)
  # NOTE: Values below 10 are not recommended for production
  # NOTE: Values above 14 may cause significant performance impact
  bcrypt_cost: 10

  # ACCESS AND REFRESH TOKEN CONFIGURATION
  # The authentication system uses a dual-token approach:
  # 1. Short-lived access tokens for API authorization
  # 2. Longer-lived refresh tokens for obtaining new access tokens without re-authentication
  #
  # SECURITY CONSIDERATIONS:
  # - Access tokens should have short lifetimes to minimize the risk if tokens are compromised
  # - Refresh tokens have longer lifetimes but are only used for a single purpose
  # - RefreshTokenLifetime should ALWAYS be longer than TokenLifetime (typically 5-10x longer)
  # - Very long refresh token lifetimes increase security risks (max recommended: 2 weeks)

  # Access token lifetime in minutes (default: 60)
  # - These tokens are used for API authorization
  # - Presented with every API request in the Authorization header
  # - Shorter lifetimes (15-60 minutes) are more secure but require more frequent token refreshes
  # - Longer lifetimes (2-24 hours) improve user experience but increase security risk
  token_lifetime_minutes: 60

  # Refresh token lifetime in minutes (default: 10080 = 7 days)
  # - These tokens are used only to obtain new access/refresh token pairs
  # - Should be stored securely (HTTP-only, secure cookies, or encrypted storage)
  # - Recommended values: 1-14 days (1440-20160 minutes)
  # - Current setting: 7 days (10080 minutes) balances security and convenience
  refresh_token_lifetime_minutes: 10080

# LLM settings
llm:
  # API key for Google Gemini services
  gemini_api_key: your-gemini-api-key

  # Gemini model to use for flashcard generation
  # Examples: gemini-2.0-flash, gemini-1.5-pro
  model_name: gemini-2.0-flash

  # Path to the prompt template file for flashcard generation
  # Must be a valid file path accessible to the application
  prompt_template_path: prompts/flashcard_template.txt

  # Maximum number of retries for transient API errors (0-5)
  # Default: 3
  max_retries: 3

  # Base delay between retries in seconds (1-60)
  # Actual delay uses exponential backoff: delay = base_delay * (2^attempt)
  # Default: 2
  retry_delay_seconds: 2

# Task processing settings
task:
  # Number of worker goroutines for processing background tasks (default: 2)
  worker_count: 2

  # Size of the in-memory task queue buffer (default: 100)
  queue_size: 100

  # Age in minutes after which a task in "processing" state is considered stuck (default: 30)
  # Stuck tasks will be reset to "pending" state and reprocessed
  stuck_task_age_minutes: 30
